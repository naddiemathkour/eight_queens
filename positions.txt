 0   1   2   3   4   5   6   7
 8   9  10  11  12  13  14  15
16  17  18  19  20  21  22  23
24  25  26  27  28  29  30  31
32  33  34  35  36  37  38  39
40  41  42  43  44  45  46  47
48  49  50  51  52  53  54  55
56  57  58  59  60  61  62  63

Heap's implementation: map row numbers in an 8 index integer array
1 2 3 4 5 6 7 8 -> 0 9 18 27 36 45 54 63
8 2 3 4 5 6 7 1
8 1 3 4 5 6 7 2
8 1 2 4 5 6 7 3

or

0 1 2 3 4 5 6 7 -> 0 9 18 27 36 45 54 63
7 1 2 3 4 5 6 0 -> 7 9 18 27 36 45 54 63

Finding heap positions:
  let i = index of heap array
  position = 8 * i + arr[i]

  e.g.: for a[0] = 7, position = 8 * i//col# + arr[i] = 0 + 7 = 7
        for a[4] = 7, position = 8 * i + arr[i] = 8*4 + 7 = 39
        for a[2] = 7, position = 8 * i + arr[i] = 8*2 + 7 = 23


Finding farthest left position in row:
  current_position  -= (current_position % 8)

Finding farthest right position in row:
  current_position += 7 - (current_position % 8)

Finding farthest top position:
  current_position %= 8

Finding farthest bottom position:
  current_position = 56 + (current_position % 8)

Diagonals:

Finding numbers along top-right of diagonal:
  current_position = current_position + (7 - (current_position % 8)) - (8 * (7 - (current_position % 8)))

  iterate down-left:
    current_position += 7

Finding numbers along top-left of diagonal:
  current_position = current_position - (current_position % 8) + (8 * current_position % 8)

  iterate down-right:
    current_position += 9
